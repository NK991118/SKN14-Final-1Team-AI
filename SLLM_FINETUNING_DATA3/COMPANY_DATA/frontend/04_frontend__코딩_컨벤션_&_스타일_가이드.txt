<!-- 회사: 코드노바 | 대상: 사원(프론트엔드) | 작성일: 2025-08-29 -->
# 코딩 컨벤션 & 스타일 가이드

분류: frontend | 회사: 코드노바 | 버전: v1.0 | 작성일: 2025-08-29

---

## 1. 기본 원칙

- **일관성**: 모든 팀원이 동일한 스타일을 따르도록 하여 코드의 가독성을 높입니다.
- **명확성**: 코드가 하는 일을 명확하게 표현하여 다른 개발자가 쉽게 이해할 수 있도록 합니다.
- **재사용성**: 중복 코드를 피하고, 재사용 가능한 컴포넌트를 만들어 유지보수성을 높입니다.

## 2. 파일 및 폴더 구조

- **폴더 구조**: 프로젝트의 구조는 기능별로 나누어 관리합니다. 각 기능은 별도의 폴더를 가지며, 그 안에 관련된 파일들을 포함합니다.
- **파일 네이밍**: 파일 이름은 소문자와 하이픈(-)을 사용하여 작성합니다. 예: `user-profile.js`

## 3. 변수 및 함수

- **변수명**: 변수명은 의미를 명확히 전달하도록 작성합니다. 예를 들어, `userAge`와 같이 명확한 이름을 사용합니다.
- **함수명**: 함수명은 동사로 시작하며, 수행하는 동작을 명확히 나타내야 합니다. 예: `fetchUserData()`

## 4. 주석

- **주석 작성**: 코드의 복잡한 부분이나 중요한 로직에는 주석을 추가하여 설명합니다.
- **주석 스타일**: 주석은 한 줄 주석과 블록 주석을 적절히 사용하여 가독성을 높입니다. 블록 주석은 여러 줄에 걸쳐 설명할 때 사용합니다.

## 5. 코드 포맷팅

- **들여쓰기**: 2칸 혹은 4칸 들여쓰기를 사용합니다. 팀 내에서 일관된 방식으로 설정합니다.
- **줄 길이**: 한 줄의 길이는 80~120자로 제한하고, 긴 줄은 적절히 줄바꿈합니다.
- **공백**: 연산자와 괄호 사이에는 공백을 사용하여 가독성을 높입니다.

## 6. 컴포넌트 작성

- **컴포넌트 구조**: 각 컴포넌트는 기능별로 나누어 작성하고, 상태(state)와 속성(props)을 명확히 구분합니다.
- **스타일링**: CSS-in-JS 또는 CSS 모듈을 사용하여 스타일을 컴포넌트와 함께 관리합니다.

## 7. 에러 처리

- **에러 핸들링**: 모든 비동기 작업에는 에러 핸들링을 포함시켜야 하며, 사용자에게 적절한 피드백을 제공합니다.
- **로깅**: 중요한 에러는 로그로 남겨 추후 분석할 수 있도록 합니다.

## 8. 테스트

- **유닛 테스트**: 모든 주요 기능에 대해 유닛 테스트를 작성하여 코드의 신뢰성을 높입니다.
- **통합 테스트**: 여러 컴포넌트가 상호작용하는 경우 통합 테스트를 작성하여 전체 흐름을 검증합니다.

## 9. 코드 리뷰

- **리뷰 프로세스**: 모든 코드는 코드 리뷰를 통해 검토한 후에 병합됩니다. 리뷰어는 주석 및 피드백을 제공하여 코드 품질을 높입니다.
- **피드백 반영**: 리뷰에서 받은 피드백은 적극적으로 반영하여 개선합니다.

## 10. 기타

- **도구 사용**: ESLint, Prettier 등의 도구를 사용하여 코드 스타일을 자동으로 관리합니다.
- **문서화**: 작성한 코드에 대한 문서는 항상 최신 상태로 유지하여 팀원들이 쉽게 접근할 수 있도록 합니다.

---

다음 개정 제안: 코드 예시를 포함한 구체적인 사례 추가, 최신 트렌드 반영을 위한 정기적 업데이트 필요.
